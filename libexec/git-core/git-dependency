#!/usr/bin/perl

# Git package manager plugin.
#
# Command syntax
#-----------------
#
# git-dependency add [ -c | --commit ] [ -m | --message {message} ] {repository} ...
#                list
#                remove [ -c | --commit ] [ -m | --message {message} ] [ {path} ... ]
#
# Repository files
#-------------------
#
# .gitpackage
#
#  Contains package information for the repository.
#
#  [dependency "dependency/path"]
#    url = ??/repository.git
#    path = dependency/path
#
# Description
#--------------
#
#  This git command provides a package manager interface to the git submodule
#  command structure.  Packages are libraries that are included in application
#  source directories.  Some packages depend upon other packages.  But the
#  packages that are depended upon do not reside in a sub directory of the
#  original package.  Packages are treated as submodules, but due to limitations
#  with the handling of dependencies in the submodule commands, this command
#  library was written.
#
# Command overview
#
# [ add {repository} ]
#
#  The add dependency command includes a git package in your application source
#  directory.  As the package is added and pulled, this script checks if a
#  .gitpackage file exists, and if so, adds and pulls all of the dependent
#  packages into the source directory.  It performs this add in a recursive
#  manner until all dependent packages have been added and pulled.  After it
#  pulls all of the packages needed by the specified package, it initializes
#  the submodules.
#
#    Parameters
#    ------------
#    1. {repository} - Url or path of the git submodule repository.
#
# [ list ]
#
#  The list package command lists all of the packages currently included in the
#  git repository.
#
# [ remove [ {path} ... ] ]
#
#   The remove dependency command removes a dependency from this submodule
#   repository.

#*******************************************************************************
#-------------------------------------------------------------------------------
# Command imports
#-------------------------------------------------------------------------------

use strict;
use warnings;

use Switch;

use Git;

use GitPM::Param;
use GitPM::Display;
use GitPM::Package;

#-------------------------------------------------------------------------------

use constant {

  # Boolean syntactic sugar
  TRUE  => 1,
  FALSE => 0,

  # Commands
  CMD_ADD    => 'add',
  CMD_EDIT   => 'edit',
  CMD_LIST   => 'list',
  CMD_REMOVE => 'rm',

  # Settings
  COMMAND => 'command',
  
  # Command parameters.
  VAR_URL => &GitPM::Package::VAR_URL,
  VAR_PATH => &GitPM::Package::VAR_PATH,
  VAR_BRANCH => &GitPM::Package::VAR_BRANCH,
  VAR_COMMIT => &GitPM::Package::VAR_COMMIT,
  
  OPT_RESET => &GitPM::Package::OPT_RESET,
  
  OPT_STORE => &GitPM::Package::OPT_STORE,
  OPT_COMMIT => &GitPM::Package::OPT_COMMIT,
  OPT_COMMIT_MSG => &GitPM::Package::OPT_COMMIT_MSG,
  
  OPT_REMOVE_ALL => 'remove_all'
};

#*******************************************************************************
#-------------------------------------------------------------------------------
# Command variables
#-------------------------------------------------------------------------------

our $COMMAND = shift @ARGV;
our $PARAMS  = \@ARGV;

our $DISPLAY = GitPM::Display->new();

# Single package instance.  ( current repository )
our $PACKAGE = GitPM::Package->new(
  &GitPM::Package::REPOSITORY => Git->repository(),
  &GitPM::Package::DISPLAY    => $DISPLAY
);

#*******************************************************************************
#-------------------------------------------------------------------------------
# Command help display
#-------------------------------------------------------------------------------

sub display_usage {
  $DISPLAY->normal(
    '',
    (
      $COMMAND
      ? 'Invalid dependency command specified.'
      : 'No dependency command specified.'
    ),
    '',
    'Supported dependency commands :',
    '',
    ' git dependency add --help     * Add a new dependency to this package.',
    ' git dependency edit --help    * Edit an existing dependency in this package.',
    ' git dependency list --help    * List all dependencies for this package.',
    ' git dependency rm --help      * Remove dependencies from this package.'
  );
}

#*******************************************************************************
#-------------------------------------------------------------------------------
# Dependency ADD command
#-------------------------------------------------------------------------------
#
our $command_add_help = <<'END';

 Command syntax
-----------------

 git dependency add {repository_location}
 
   OR
 
 git dependency add -p {repository_path} [ {repository_location} ]
 

 Some common patterns of repository locations : ( [] means optional )

  REMOTE SSH    : ssh://user@hostname/[directory/.../]
                                      [my-info-]my.package.path[.git]
  REMOTE HTTP   : http://hostname/[directory/.../]
                                  [my-info-]my.package.path[.git]
  REMOTE GITHUB : git@github.com:user/[directory/.../]
                                      [my-info-]my.package.path[.git]

 Options :

  [ -h | --help ]               * Interupt command execution and return help.
  [ -d | --debug ]              * Display debug information.
  [ -v | --verbose ]            * Display more information than normal.
  [ -c | --commit ]             * Commit changes to .gitpackage after adding
                                  dependency.
  [ -m | --message {message} ]  * Commit message ( if committing ).
  [ -p | --path {path} ]        * Path to repository from base source path of
                                  application.  If this is not given, then the
                                  path is parsed from the repository name.
                                  The repository url is parsed from the
                                  following pattern :
                                    [{my-info}-]{my.package.path}[.git]
  [ -b | --branch {branch} ]    * Branch of repository required.  The default
                                  is <master>.
  [ -t | --tag {tag} ]          * Tag of repository branch required.  The
                                  default is the most recent commit, <HEAD>.
                                  This can be a commit hash.  It is named tag
                                  to avoid conflicts with the commit flag.

END

sub command_add {
  
  # Command name.
  $0 = 'git dependency add';

  # Parse command settings.
  my $settings =
    command_add_settings( GitPM::Param->new( shift, command_add_options() ) );

  # Begin add dependency.
  $DISPLAY->verbose( 'Starting dependency add command.' );
  
  $PACKAGE->set_dependency(
    
    # Repository location.
    $settings->{ &VAR_URL },
    
    # Dependency variables
    &VAR_PATH   => $settings->{ &VAR_PATH },
    &VAR_BRANCH => $settings->{ &VAR_BRANCH },
    &VAR_COMMIT => $settings->{ &VAR_COMMIT },
    
    # Options
    &OPT_STORE => TRUE,
    
    &OPT_COMMIT => $settings->{ &OPT_COMMIT },
    &OPT_COMMIT_MSG => $settings->{ &OPT_COMMIT_MSG }
  );
}

#-------------------------------------------------------------------------------

sub command_add_options {
  
  my %options = (
    
    'help' => $command_add_help,

    # Required.
    'other_values' => { help => 'repository ...' },

    # Optional.
    '-p' => {
      help     => 'See information for --path option.',
      n_values => 1
    },
    '--path' => {
      help     => 'Repository path from application base source directory.',
      n_values => 1
    },

    '-b' => {
      help     => 'See information for --branch option.',
      n_values => 1
    },
    '--branch' => {
      help => 'Branch required for this repository.  Defaults to < master >.',
      n_values => 1
    },

    '-t' => {
      help     => 'See information for --tag option.',
      n_values => 1
    },
    '--tag' => {
      help => 'Tag required for this repository.  Defaults to the last commit.',
      n_values => 1
    }
  );

  commit_options( \%options );
  display_options( \%options );
  help_options( \%options );
  
  return %options;
}

#-------------------------------------------------------------------------------

sub command_add_settings {
  my $parser   = shift;
  my $settings = {};

  # Abort and show help information if requested.
  parse_help_settings( $parser );

  if ( ! @{ $parser->Values( 'other_values' ) } ) {
    $DISPLAY->normal( $parser->Help() );
    exit();
  }

  parse_display_settings( $parser );
  parse_commit_settings( $parser, $settings );

  # Get command repository.
  $settings->{ &VAR_URL } = shift @{ $parser->Values( 'other_values' ) };
  
  # Get repository path, if specified.
  if ( $parser->Values( '-p' ) ) {
    $settings->{ &VAR_PATH } = $parser->Values( '-p' );
  }
  elsif ( $parser->Values( '--path' ) ) {
    $settings->{ &VAR_PATH } = $parser->Values( '--path' );
  }

  # Get repository branch, if specified.
  if ( $parser->Values( '-b' ) ) {
    $settings->{ &VAR_BRANCH } = $parser->Values( '-b' );
  }
  elsif ( $parser->Values( '--branch' ) ) {
    $settings->{ &VAR_BRANCH } = $parser->Values( '--branch' );
  }
  
  # Get repository tag, if specified.
  if ( $parser->Values( '-t' ) ) {
    $settings->{ &VAR_COMMIT } = $parser->Values( '-t' );
  }
  elsif ( $parser->Values( '--tag' ) ) {
    $settings->{ &VAR_COMMIT } = $parser->Values( '--tag' );
  }
  
  return $settings;
}

#*******************************************************************************
#-------------------------------------------------------------------------------
# Dependency EDIT command
#-------------------------------------------------------------------------------
#
our $command_edit_help = <<'END';

 Command syntax
-----------------

 git dependency edit {repository_path} [ {repository_location} ]
 
 
 Some common patterns of repository locations : ( [] means optional )

  REMOTE SSH    : ssh://user@hostname/[directory/.../]
                                      [my-info-]my.package.path[.git]
  REMOTE HTTP   : http://hostname/[directory/.../]
                                  [my-info-]my.package.path[.git]
  REMOTE GITHUB : git@github.com:user/[directory/.../]
                                      [my-info-]my.package.path[.git]

 Options :

  [ -h | --help ]               * Interupt command execution and return help.
  [ -d | --debug ]              * Display debug information.
  [ -v | --verbose ]            * Display more information than normal.
  [ -c | --commit ]             * Commit changes to .gitpackage after editing
                                  dependency.
  [ -m | --message {message} ]  * Commit message ( if committing ).
  [ -r | --reset ]              * Reset non specified dependency variables
                                  to the defaults.  This flag does not reset
                                  the dependency location.  If you do not 
                                  specify the location, then the existing
                                  location is used.  This way you can change
                                  the branch or tag without modifying or 
                                  specifying the repository location.
  [ -b | --branch {branch} ]    * Branch of repository required.  The default
                                  is <master>.
  [ -t | --tag {tag} ]          * Tag of repository branch required.  The
                                  default is the most recent commit, <HEAD>.
                                  This can be a commit hash.  It is named tag
                                  to avoid conflicts with the commit flag.

END

sub command_edit {
  
  # Command name.
  $0 = 'git dependency edit';

  # Parse command settings.
  my $settings =
    command_edit_settings( GitPM::Param->new( shift, command_edit_options() ) );

  # Begin add dependency.
  $DISPLAY->verbose( 'Starting dependency edit command.' );
  
  # Don't continue unless dependency exists.
  unless ( $PACKAGE->dependency( $settings->{ &VAR_PATH } ) ) {
    $DISPLAY->normal(
      '', 
      "Dependency '" . $settings->{ &VAR_PATH } . "' does not exist yet.",
      '',
      "Run 'git dependency add' to add a new dependency for this path." 
    );    
    return;  
  }
  
  $PACKAGE->set_dependency(
    
    # Repository location.
    $settings->{ &VAR_URL },
    
    # Dependency variables
    &VAR_PATH   => $settings->{ &VAR_PATH },
    
    &VAR_BRANCH => $settings->{ &VAR_BRANCH },    
    &VAR_COMMIT => $settings->{ &VAR_COMMIT },
    
    # Options
    &OPT_RESET => $settings->{ &OPT_RESET },
    
    &OPT_STORE => TRUE,
    
    &OPT_COMMIT => $settings->{ &OPT_COMMIT },
    &OPT_COMMIT_MSG => $settings->{ &OPT_COMMIT_MSG }
  );
}

#-------------------------------------------------------------------------------

sub command_edit_options {
  
  my %options = (
    
    'help' => $command_edit_help,

    # Required.
    'other_values' => { help => 'repository_path [ repository_url ]' },

    # Optional.
    '-r' => {
      help     => [
        'Reset non specified dependency variables to the defaults.', 
        'This flag does not reset the dependency location.'
      ]
    },
    '--reset' => {
      help     => 'See information for -r option.'
    },

    '-b' => {
      help     => 'See information for --branch option.',
      n_values => 1
    },
    '--branch' => {
      help => 'Branch required for this repository.  Defaults to < master >.',
      n_values => 1
    },

    '-t' => {
      help     => 'See information for --tag option.',
      n_values => 1
    },
    '--tag' => {
      help => 'Tag required for this repository.  Defaults to the last commit.',
      n_values => 1
    }
  );

  commit_options( \%options );
  display_options( \%options );
  help_options( \%options );
  
  return %options;
}

#-------------------------------------------------------------------------------

sub command_edit_settings {
  my $parser   = shift;
  my $settings = {};
  
  my $parameters = $parser->Values( 'other_values' );

  # Abort and show help information if requested.
  parse_help_settings( $parser );

  if ( ! @$parameters ) {
    $DISPLAY->normal( $parser->Help() );
    exit();
  }

  parse_display_settings( $parser );
  parse_commit_settings( $parser, $settings );

  # Get repository path.
  $settings->{ &VAR_PATH } = shift @$parameters;
  
  # Get repository location.
  $settings->{ &VAR_URL } = shift @$parameters;
  
  if ( ! $settings->{ &VAR_URL } ) {
    $settings->{ &VAR_URL } = $PACKAGE->dependency_setting( $settings->{ &VAR_PATH }, &VAR_URL );
  }
  
  # Check whether or not to reset the repository variables to defaults.
  $settings->{ &OPT_RESET } = $parser->Values( '-r' )
    || $parser->Values( '--reset' );
  
  # Get repository branch.
  if ( $parser->Values( '-b' ) ) {
    $settings->{ &VAR_BRANCH } = $parser->Values( '-b' );
  }
  elsif ( $parser->Values( '--branch' ) ) {
    $settings->{ &VAR_BRANCH } = $parser->Values( '--branch' );
  }
  elsif ( ! $settings->{ &OPT_RESET } ) {
    $settings->{ &VAR_BRANCH } = $PACKAGE->dependency_setting( $settings->{ &VAR_PATH }, &VAR_BRANCH );
  }
  
  # Get repository tag.
  if ( $parser->Values( '-t' ) ) {
    $settings->{ &VAR_COMMIT } = $parser->Values( '-t' );
  }
  elsif ( $parser->Values( '--tag' ) ) {
    $settings->{ &VAR_COMMIT } = $parser->Values( '--tag' );
  }
  elsif ( ! $settings->{ &OPT_RESET } ) {
    $settings->{ &VAR_COMMIT } = $PACKAGE->dependency_setting( $settings->{ &VAR_PATH }, &VAR_COMMIT );  
  }
  
  return $settings;
}

#*******************************************************************************
#-------------------------------------------------------------------------------
# Dependency LIST command
#-------------------------------------------------------------------------------
#
our $command_list_help = <<'END';

 Command syntax
-----------------

 git dependency list

 Options :

  [ -h | --help ]               * Interupt command execution and return help.
  [ -d | --debug ]              * Display debug information.
  [ -v | --verbose ]            * Display more information than normal.
  
END

sub command_list {

  # Command name.
  $0 = 'git dependency list';

  # Parse command settings.
  command_list_settings(
    GitPM::Param->new( shift, command_list_options() ) );

  # Begin list dependencies.
  $DISPLAY->verbose( 'Starting dependency list command.' );
  
  $PACKAGE->render_dependency_list();
}

#-------------------------------------------------------------------------------

sub command_list_options {

  my %options = (
    'help' => $command_list_help,
  );

  display_options( \%options );
  help_options( \%options );

  return %options;
}

#-------------------------------------------------------------------------------

sub command_list_settings {
  my $parser = shift;

  # Get extra command options.
  parse_help_settings( $parser );
  parse_display_settings( $parser );
}

#*******************************************************************************
#-------------------------------------------------------------------------------
# Dependency REMOVE command
#-------------------------------------------------------------------------------
#
our $command_remove_help = <<'END';

 Command syntax
-----------------

 git dependency rm -a
 
   OR
 
 git dependency rm {repository_path} ...

 Options :

  [ -h | --help ]               * Interupt command execution and return help.
  [ -d | --debug ]              * Display debug information.
  [ -v | --verbose ]            * Display more information than normal.
  [ -c | --commit ]             * Commit changes to .gitpackage after adding
                                  dependency.
  [ -m | --message {message} ]  * Commit message ( if committing ).
  [ -a | --all ]                * Remove all dependencies from this package.

END

sub command_remove {

  # Command name.
  $0 = 'git dependency rm';

  # Parse command settings.
  my $settings = command_remove_settings(
    GitPM::Param->new( shift, command_remove_options() ) );

  # Begin remove dependencies.
  $DISPLAY->verbose( 'Starting dependency remove command.' ); 
  
  $PACKAGE->remove_dependencies( 
    
    # Repository paths to remove.
    $settings->{ &VAR_PATH }, 
    
    # Options
    &OPT_STORE => TRUE,
    
    &OPT_COMMIT => $settings->{ &OPT_COMMIT },
    &OPT_COMMIT_MSG => $settings->{ &OPT_COMMIT_MSG }     
  );
}

#-------------------------------------------------------------------------------

sub command_remove_options {

  my %options = (
  
    'help' => $command_remove_help,
    
    'other_values' => { help => 'path ...' },
    
    '-a'           => { help => 'Remove all dependencies.' },
    '--all'        => { help => 'See information for -a option.' },    
  );

  commit_options( \%options );
  display_options( \%options );
  help_options( \%options );

  return %options;
}

#-------------------------------------------------------------------------------

sub command_remove_settings {
  my $parser = shift;
  my $settings = {};
  
  my $parameters = $parser->Values( 'other_values' );
  
  # Abort and show help information if requested.
  parse_help_settings( $parser );

  # Get command paths.
  $settings->{ &VAR_PATH } = ( 
      $parameters
    ? $parameters
    : []  
  );

  $settings->{ &OPT_REMOVE_ALL } = $parser->Values( '-a' )
    || $parser->Values( '--all' );

  if ( !@{$settings->{ &VAR_PATH }} && !$settings->{ &OPT_REMOVE_ALL } ) {
    $DISPLAY->normal( 
      '',
      'You should either specify package paths'
      . ' or the --all option to remove all dependencies.',
      '',
      $parser->Help() 
    );
  }
  
  # Get extra command options.
  parse_display_settings( $parser );
  parse_commit_settings( $parser, $settings );
  
  return $settings;
}

#*******************************************************************************
#-------------------------------------------------------------------------------
# Internal utilities
#-------------------------------------------------------------------------------

sub help_options {
  my $options = shift;

  # Help options.
  $options->{ '-h' }     = { help => 'Display help information.' };
  $options->{ '--help' } = { help => 'See information for -h option.' };
}

#-------------------------------------------------------------------------------

sub parse_help_settings {
  my $parser = shift;

  # Exit with help if help option given.
  if ( $parser->Values( '-h' ) || $parser->Values( '--help' ) ) {
    $DISPLAY->normal( $parser->Help() );
    exit();
  }
}

#-------------------------------------------------------------------------------

sub display_options {
  my $options = shift;

  # Debug options.
  $options->{ '-d' }      = { help => 'Display debug information.' };
  $options->{ '--debug' } = { help => 'See information for -d option.' };

  # Verbose options.
  $options->{ '-v' } = { help => 'Display more information than normal.' };
  $options->{ '--verbose' } = { help => 'See information for -v option.' };
}

#-------------------------------------------------------------------------------

sub parse_display_settings {
  my $parser = shift;

  unless ( $parser->Values() ) {
    return;
  }

  # Parse settings.
  $DISPLAY->set_debug( $parser->Values( '-d' )
      || $parser->Values( '--debug' ) );

  $DISPLAY->set_verbose( $parser->Values( '-v' )
      || $parser->Values( '--verbose' ) );
}

#-------------------------------------------------------------------------------

sub commit_options {
  my $options = shift;

  # Commmit flag
  $options->{ '-c' }       = { help => 'Commit after this operation.' };
  $options->{ '--commit' } = { help => 'See information for -c option.' };

  # Commit message
  $options->{ '-m' } = {
    help     => 'See information for --message option.',
    n_values => 1
  };
  $options->{ '--message' } = {
    help => [
      'If you are commiting after this dependency operation,',
      'you may specify the commit message.   If no commit message',
      'is given, then an editor is displayed.',
      'This is similar to the commit command.'
    ],
    n_values => 1
  };
}

#-------------------------------------------------------------------------------

sub parse_commit_settings {
  my ( $parser, $settings ) = @_;

  unless ( $parser->Values() ) {
    return;
  }

  # Parse settings.
  $settings->{ &OPT_COMMIT } = $parser->Values( '-c' )
    || $parser->Values( '--commit' );

  if ( $parser->Values( '-m' ) ) {
    $settings->{ &OPT_COMMIT_MSG } = $parser->Values( '-m' );
  }
  elsif ( $parser->Values( '--message' ) ) {
    $settings->{ &OPT_COMMIT_MSG } = $parser->Values( '--message' );
  }
}

#*******************************************************************************
#-------------------------------------------------------------------------------
# Command initialization
#-------------------------------------------------------------------------------

switch ( $COMMAND ) {
  
  case &CMD_ADD {
    command_add( $PARAMS );    # Launch dependency add command
    }
    case &CMD_EDIT {
    command_edit( $PARAMS );    # Launch dependency edit command
    }
    case &CMD_LIST {
    command_list( $PARAMS );    # Launch dependency list command
    }
    case &CMD_REMOVE {
    command_remove( $PARAMS );    # Launch dependency remove command
    }
    else {
    display_usage( $PARAMS );
  }
}

#-------------------------------------------------------------------------------
